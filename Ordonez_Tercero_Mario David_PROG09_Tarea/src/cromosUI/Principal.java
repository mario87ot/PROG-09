package cromosUI;

//COPIAR EN LA CARPETA PARA EXAMEN YA CON LOS ARREGLOS
import cromos.Cromo;
import static cromos.Cromo.codigoSiguiente;
import cromos.SalvarRecuperar;
import static cromosUI.EditaCromo.jtfRutaImagen;
import java.awt.Container;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.ArrayList;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 * 
 * @author Mario
 * version 14/05/2017
 *
 * Clase principal que creará la ventana principal, la cual contendrá en un 
 * menú las diferentes opciones de nuestra aplicación, crear un cromo, modificarlo
 * listarlos, borrarlos, etc. Al iniciarse la aplicación, se cargarán los datos que
 * haya guardado en cromos.dat en el arraylist de cromos, en caso de que los hubiera
 */
public class Principal extends javax.swing.JFrame {

    public static ArrayList<Cromo> cromos = new ArrayList<>();
    public static boolean cambiosEnArray = false;//variable para comprobar si ha habido algún cambio desde la última vez que se guardaron cambios

    JPanelBackground p;

    /**
     * Creates new form Principal2
     */
    public Principal() {
        initComponents();

        //Centrar ventana
        setLocationRelativeTo(null);
        //Salir del programa al pulsar el icono de cerrar
        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //Creamos la instancia de JPanelBackground
        p = new JPanelBackground();
        //Creamos un contenedor para la imagen de fondo
        Container contenedor = this.getContentPane();
        //Lo añadimos al panel
        contenedor.add(p);

        //Guardamos la imagen que queremos de icono de la ventana
        ImageIcon imagen = new ImageIcon("src/recursos/cromo.jpg");
        //Establecemos la imagen en la ventana
        setIconImage(imagen.getImage());
        /*Si se pulsa el icono de cerrar y ha habido algún cambio desde la última
         vez que se guardaron cambios, se pide confirmación al usuario primero*/
        cerrar();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jAltaCromo = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jGuardar = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuCromo = new javax.swing.JMenu();
        jCrearCromo = new javax.swing.JMenuItem();
        jModificaCromo = new javax.swing.JMenuItem();
        jBorraCromo = new javax.swing.JMenuItem();
        jListaCromo = new javax.swing.JMenuItem();

        javax.swing.GroupLayout jAltaCromoLayout = new javax.swing.GroupLayout(jAltaCromo.getContentPane());
        jAltaCromo.getContentPane().setLayout(jAltaCromoLayout);
        jAltaCromoLayout.setHorizontalGroup(
            jAltaCromoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        jAltaCromoLayout.setVerticalGroup(
            jAltaCromoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Cromos Star Wars");

        jMenu1.setMnemonic('A');
        jMenu1.setText("Archivo");

        jGuardar.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jGuardar.setText("Guardar");
        jGuardar.setEnabled(false);
        jGuardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jGuardarActionPerformed(evt);
            }
        });
        jMenu1.add(jGuardar);

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setText("Salir");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenuCromo.setMnemonic('s');
        jMenuCromo.setText("Cromos");

        jCrearCromo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_C, java.awt.event.InputEvent.CTRL_MASK));
        jCrearCromo.setText("Crear cromo");
        jCrearCromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCrearCromoActionPerformed(evt);
            }
        });
        jMenuCromo.add(jCrearCromo);

        jModificaCromo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_M, java.awt.event.InputEvent.CTRL_MASK));
        jModificaCromo.setText("Modificar cromo");
        jModificaCromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jModificaCromoActionPerformed(evt);
            }
        });
        jMenuCromo.add(jModificaCromo);

        jBorraCromo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_B, java.awt.event.InputEvent.CTRL_MASK));
        jBorraCromo.setText("Borrar cromo");
        jBorraCromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBorraCromoActionPerformed(evt);
            }
        });
        jMenuCromo.add(jBorraCromo);

        jListaCromo.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_L, java.awt.event.InputEvent.CTRL_MASK));
        jListaCromo.setText("Listar cromos");
        jListaCromo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jListaCromoActionPerformed(evt);
            }
        });
        jMenuCromo.add(jListaCromo);

        jMenuBar1.add(jMenuCromo);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 395, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 299, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * Si se pulsa el item GUARDAR del menú, se guardan los cambios en un
     * fichero y se deshabilitará la opción de guardar hasta que vuelva haber
     * algún cambio
     *
     * @param evt
     */
    private void jGuardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jGuardarActionPerformed
        //Guardamos los cromos
        SalvarRecuperar.guardaDatos();
        //Indicamos que se han guardado
        cambiosEnArray = false;
        //Inhabilitamos la opción de guardar al haberse guardado los cambios
        jGuardar.setEnabled(false);
    }//GEN-LAST:event_jGuardarActionPerformed

    /**
     *
     * @param evt
     */
    private void jModificaCromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jModificaCromoActionPerformed

        int posicion = -1;
        //Abrimos la ventana de búsqueda para pedir el codigo del cromo
        DlgBuscarCromo ventanaBuscar = new DlgBuscarCromo(this, true);
        //Ajustamos la ventana
        ventanaBuscar.pack();
        //Centramos la ventana
        ventanaBuscar.setLocationRelativeTo(null);
        //Hacemos visible la ventana
        ventanaBuscar.setVisible(true);
        //Guardamos el código introducido
        int codigoIntroducido = ventanaBuscar.getCodigo();
        //Buscamos el cromo con el código introducido
        posicion = buscarCromo(Principal.cromos, codigoIntroducido);
        if (codigoIntroducido != 0) {
            //Si posición es igual a -1, es decir, si no existe, avisamos al usuario
            if (posicion == -1) {
                JOptionPane.showMessageDialog(null, "No se encuentra un cromo con ese código.", "Atención", JOptionPane.ERROR_MESSAGE);
              //Si existe...
            } else {
                //Declaramos una instancia de la ventana que vamos a abrir      
                EditaCromo ventanaModificar = new EditaCromo(this, true);
                //Le cambiamos el título, porque en este caso es para editar un cromo, no para añadir uno nuevo
                ventanaModificar.setTitle("Editar cromo");
                //Ajustamos la ventana      
                ventanaModificar.pack();
                //Centramos la ventana
                ventanaModificar.setLocationRelativeTo(null);
                //Cargamos los datos del cromo a modificar en el formulario
                ventanaModificar.jDescripcion.setText(Principal.cromos.get(posicion).getDescripcion());
                ventanaModificar.jCodigo.setText(String.valueOf(Principal.cromos.get(posicion).getCodigo()));
                ventanaModificar.jcbBando.setSelectedItem(Principal.cromos.get(posicion).getBando());
                ventanaModificar.jcbRaro.setSelected(Principal.cromos.get(posicion).getRaro());
                ventanaModificar.spiDefensa.setValue(Principal.cromos.get(posicion).getDefensa());
                ventanaModificar.spiAtaque.setValue(Principal.cromos.get(posicion).getAtaque());
                ventanaModificar.spiAnyo.setValue(Principal.cromos.get(posicion).getAnyoEmision());
                ventanaModificar.jtfRutaImagen.setText(Principal.cromos.get(posicion).getRutaImagen());
                jtfRutaImagen.setText(EditaCromo.rutaImagen);
                ImageIcon img = new ImageIcon(EditaCromo.rutaImagen);
                EditaCromo.jlbFotoCromo.setIcon(img);
                //Hacemos visible el formulario
                ventanaModificar.setVisible(true);
                //Liberamos de memoria el formulario
                ventanaModificar.dispose();
            }
        }


    }//GEN-LAST:event_jModificaCromoActionPerformed

    /**
     * Si se pulsa el item LISTAR CROMOS del menú, se abrirá el cuadro de
     * diálogo donde se podrá listar los cromos y ver la información de éstos
     *
     * @param evt
     */
    private void jListaCromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jListaCromoActionPerformed

        //Creamos la ventana pra listar los cromos
        ListarCromos ventanaListar = new ListarCromos(this, true, Principal.cromos);
        //La centramos
        ventanaListar.setLocationRelativeTo(null);
        //La hacemos visible
        ventanaListar.setVisible(true);

    }//GEN-LAST:event_jListaCromoActionPerformed

    /**
     * Si se pulsa el item CREAR CROMO del menú, se abrirá el cuadro de diálogo
     * donde podremos crear un cromo nuevo introduciendo sus datos
     *
     * @param evt
     */
    private void jCrearCromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCrearCromoActionPerformed
        //Creamos la ventana para añadir un nuevo cromo
        EditaCromo altaCromo = new EditaCromo(this, true);
        //Mostramos el código del cromo en el textfield del código
        EditaCromo.jCodigo.setText(Integer.toString(codigoSiguiente));
        //La hacemos visible
        altaCromo.setVisible(true);
        

    }//GEN-LAST:event_jCrearCromoActionPerformed

    /**
     * Si se pulsa del item del menú SALIR, se avisará al usuario si ha habido
     * algún cambio, si no, cerrará directamente la aplicación
     *
     * @param evt
     */
    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        int respuesta;
        //Si ha habido algún cambio desde la última vez que se guardó...
        if (cambiosEnArray == true) {
            //Avisamos al usuario que ha habido algún cambio antes de salir
            respuesta = JOptionPane.showConfirmDialog(null, "Ha habido cambios que no se han guardado. ¿Está seguro de salir de la aplicación?", "Confirmación de salida", JOptionPane.YES_NO_OPTION, 1);
            //Si se pulsa Sí se saldrá de la aplicación
            if (respuesta == JOptionPane.YES_OPTION) {
                System.exit(0);

            }
          //Si no ha habido cambios desde la última vez que se guardó, saldrá directamente de la aplicación
        } else {
            System.exit(0);

        }


    }//GEN-LAST:event_jMenuItem2ActionPerformed

    /**
     * Si se pulsa el item del menú BORRAR CROMO, se abrirá una ventana para
     * buscar el código del cromo a borrar, si no existe se avisará al usuario.
     * En caso contrario, se pedirá confirmación al usuario para borrar el cromo
     * mostrándose su información
     *
     * @param evt
     */
    private void jBorraCromoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBorraCromoActionPerformed

        int posicion = -1;
        //Abrimos a ventana para bsucar el código del cromo que queremos borrar
        DlgBuscarCromo ventanaBuscar = new DlgBuscarCromo(this, true);
        //Ajustamos la ventana
        ventanaBuscar.pack();
        //Centramos la ventana
        ventanaBuscar.setLocationRelativeTo(null);
        //La hacemos visible
        ventanaBuscar.setVisible(true);
        //Guardamos el código introducido
        int codigoIntroducido = ventanaBuscar.getCodigo();
        //Buscamos el cromo con el código introducido
        posicion = buscarCromo(cromos, codigoIntroducido);

        if (codigoIntroducido != 0) {
            //Si posicion es igual a -1, es decir, si no existe, se avisa al usuario
            if (posicion == -1) {
                JOptionPane.showMessageDialog(null, "No se encuentra un cromo con ese código.", "Atención", JOptionPane.ERROR_MESSAGE);
                //Si existe...
            } else {
                //Se pide confirmación al usuario, si pulsa en Sí, se borrará el cromo
                if (JOptionPane.showConfirmDialog(null, "¿Está seguro de que quiere eliminar el cromo: \n" + cromos.get(posicion).toString(), "Borrar cromo", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                    //Borramos el cromo
                    Principal.cromos.remove(posicion);
                    //Indicamos que ha habido un cambio
                    Principal.cambiosEnArray = true;
                    //Habilitamos la opción de guardar al haber habido un cambio
                    Principal.jGuardar.setEnabled(true);
                    //Restamos en uno el total de cromos
                    Cromo.totalCromos--;
                    JOptionPane.showMessageDialog(null, "Se ha borrado el cromo.", "Atención", JOptionPane.INFORMATION_MESSAGE);
                }
            }

        }
    }//GEN-LAST:event_jBorraCromoActionPerformed

    /**
     * Método que busca un cromo por su código
     *
     * @param cromos ArrayList de cromos
     * @param codigo Código del cromo
     * @return posición del cromo con el código introducido. Si no existe,
     * devolverá -1.
     */
    public static int buscarCromo(ArrayList<Cromo> cromos, int codigo) {
        int posicion = -1;
        if (cromos != null) {
            int contador = 0;
            while (contador < cromos.size() && posicion == -1) {

                if (codigo == (cromos.get(contador).getCodigo())) {
                    posicion = contador;
                }
                contador++;
            }
        }
        return posicion;
    }

    /**
     * Método para pedir confirmación de salida si se pulsa el icono de cerrar y
     * ha habido algún cambio sin guardar. Este método se llamará en el
     * constructor
     */
    public void cerrar() {
        try {
            this.setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
            addWindowListener(new WindowAdapter() {
                @Override
                public void windowClosing(WindowEvent e) {
                    confirmarSalida();
                }
            });
            this.setVisible(true);
        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    /**
     * Método que muestra un aviso al usuario si ha habido algún cambio y no ha
     * guardado. Si no ha habido cambios, sale de aplicación directamente. Se
     * llamará en el método anterior de cerrar()
     */
    public void confirmarSalida() {
        if (cambiosEnArray == true) {
            int opcion = JOptionPane.showConfirmDialog(this, "Ha habido cambios que no se han guardado. ¿Está seguro de salir de la aplicación?", "Atención", JOptionPane.YES_NO_OPTION);
            if (opcion == JOptionPane.YES_OPTION) {
                System.exit(0);
            }

        } else {
            System.exit(0);
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */

 /*Recuperamos los datos guardados en el archivo cromos.dat cuando ejecutamos 
        el programa cargándolos en el arraylist de cromos, si no hay datos guardados 
        se avisará de ello*/
        Principal.cromos = SalvarRecuperar.recuperaDatos("cromos.dat");

        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;

                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);

        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Principal.class
                    .getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>


        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                try {
                    //Creamos la ventana principal
                    Principal ventana = new Principal();
                    //La hacemos visible
                    ventana.setVisible(true);

                } catch (Exception e) {
                    e.printStackTrace();
                }
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JDialog jAltaCromo;
    private javax.swing.JMenuItem jBorraCromo;
    private javax.swing.JMenuItem jCrearCromo;
    public static javax.swing.JMenuItem jGuardar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JMenuItem jListaCromo;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jMenuCromo;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jModificaCromo;
    // End of variables declaration//GEN-END:variables

}
